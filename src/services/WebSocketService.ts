import { Client, type IMessage } from '@stomp/stompjs';
// import SockJS from 'sockjs-client';
import { setSocketStatus } from '../store/socket';
import { addNotification } from '../store/notification';
import type { Store } from '@reduxjs/toolkit';
import type { RootState } from '../store';

class WebSocketService {
    private stompClient: Client | null = null;
    private store: Store<RootState> | null = null;

    /**
     * Ph∆∞∆°ng th·ª©c n√†y ph·∫£i ƒë∆∞·ª£c g·ªçi m·ªôt l·∫ßn duy nh·∫•t khi ·ª©ng d·ª•ng kh·ªüi t·∫°o
     * ƒë·ªÉ "ti√™m" Redux store v√†o service.
     * @param store - Redux store c·ªßa ·ª©ng d·ª•ng.
     */
    public initialize(store: Store<RootState>) {
        this.store = store;
    }

    /**
     * B·∫Øt ƒë·∫ßu qu√° tr√¨nh k·∫øt n·ªëi ƒë·∫øn WebSocket server.
     */
    public connect() {
        // NgƒÉn ch·∫∑n vi·ªác k·∫øt n·ªëi n·∫øu ch∆∞a ƒë∆∞·ª£c initialize ho·∫∑c ƒë√£ k·∫øt n·ªëi
        if (!this.store) {
            console.error("WebSocketService has not been initialized. Please call initialize(store) before connecting.");
            return;
        }
        if (this.stompClient?.active) {
            console.log('WebSocket is already connected.');
            return;
        }
        const accessToken = this.getCookie('access_token');


        this.stompClient = new Client({
            // S·ª≠ d·ª•ng SockJS l√†m transport layer ƒë·ªÉ tƒÉng t√≠nh t∆∞∆°ng th√≠ch
            brokerURL: 'ws://localhost:8080/notification-socket',
            connectHeaders: {
                Authorization: `Bearer ${accessToken}`,
            },
            // Log debug cho qu√° tr√¨nh k·∫øt n·ªëi STOMP
            debug: (str) => {
                console.log('STOMP DEBUG: ' + str);
            },

            // T·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i sau 5 gi√¢y n·∫øu m·∫•t k·∫øt n·ªëi
            reconnectDelay: 5000,

            // Callback ƒë∆∞·ª£c g·ªçi khi k·∫øt n·ªëi STOMP th√†nh c√¥ng
            onConnect: (frame) => {
                console.log('‚úÖ WebSocket Connected:', frame);
                // Dispatch action ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i k·∫øt n·ªëi trong Redux
                this.store?.dispatch(setSocketStatus('connected'));
                // T·ª± ƒë·ªông subscribe v√†o c√°c k√™nh c·∫ßn thi·∫øt
                this.subscribeToTopics();
            },

            // Callback ƒë∆∞·ª£c g·ªçi khi k·∫øt n·ªëi b·ªã ng·∫Øt
            onDisconnect: () => {
                console.log('üîå WebSocket Disconnected!');
                this.store?.dispatch(setSocketStatus('disconnected'));
            },

            // Callback x·ª≠ l√Ω l·ªói t·ª´ STOMP broker
            onStompError: (frame) => {
                console.error('Broker reported error: ' + frame.headers['message']);
                console.error('Additional details: ' + frame.body);
                this.store?.dispatch(setSocketStatus('error'));
            },
        });

        // B·∫Øt ƒë·∫ßu qu√° tr√¨nh k·∫øt n·ªëi
        this.stompClient.activate();
    }

    private getCookie(name: string): string | null {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop()?.split(';').shift() || null;
        return null;
    }

    /**
     * Ng·∫Øt k·∫øt n·ªëi WebSocket.
     */
    public disconnect() {
        this.stompClient?.deactivate();
        this.stompClient = null;
    }

    /**
     * T·ª± ƒë·ªông ƒëƒÉng k√Ω c√°c k√™nh (topic/queue) c·∫ßn thi·∫øt d·ª±a tr√™n vai tr√≤ c·ªßa ng∆∞·ªùi d√πng.
     */
    private subscribeToTopics() {
        if (!this.store || !this.stompClient) return;

        const state = this.store.getState();
        const user = state.auth.user;

        if (!user) return; // Kh√¥ng subscribe n·∫øu ch∆∞a c√≥ th√¥ng tin user

        // N·∫øu l√† Admin, subscribe v√†o topic chung c·ªßa admin
        if (user.role === 'ADMIN') {
            this.stompClient.subscribe('/topic/notifications/admin', (message) => this.handleMessage(message));
            console.log('Subscribed to /topic/notifications/admin');
        }

        // M·ªçi ng∆∞·ªùi d√πng (k·ªÉ c·∫£ admin) ƒë·ªÅu subscribe v√†o queue c√° nh√¢n c·ªßa h·ªç
        this.stompClient.subscribe(`/user/${user.username}/queue/notifications`, (message) => this.handleMessage(message));
        console.log(`Subscribed to /user/${user.username}/queue/notifications`);
    }

    /**
     * X·ª≠ l√Ω message nh·∫≠n ƒë∆∞·ª£c t·ª´ server.
     * @param message - Message t·ª´ STOMP broker.
     */
    private handleMessage(message: IMessage) {
        if (!this.store) return;

        try {
            const notificationPayload = JSON.parse(message.body);
            console.log('Received notification:', notificationPayload);

            // Dispatch action ƒë·ªÉ th√™m th√¥ng b√°o m·ªõi v√†o Redux store
            this.store.dispatch(addNotification(notificationPayload));

        } catch (error) {
            console.error('Could not parse WebSocket message body:', message.body, error);
        }
    }
}

// Export m·ªôt instance duy nh·∫•t (singleton pattern) ƒë·ªÉ to√†n b·ªô ·ª©ng d·ª•ng d√πng chung
export const webSocketService = new WebSocketService();